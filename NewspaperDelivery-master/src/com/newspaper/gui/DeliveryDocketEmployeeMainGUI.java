/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.newspaper.gui;

import com.newspaper.db.DBconnection;
import com.newspaper.deliveryarea.DeliveryArea;
import com.newspaper.deliverydocket.*;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;

public class DeliveryDocketEmployeeMainGUI extends javax.swing.JFrame {

    /**
     * Creates new form GuiMainMenu
     */
    public DeliveryDocketEmployeeMainGUI() {
        initComponents();
        DBconnection.init_db();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel3 = new JPanel();
        btnCreateDocketMenu = new JButton();
        btnEditDocketMenu = new JButton();
        btnDeleteDocketMenu = new JButton();
        btnCustomerDeliveriesMenu = new JButton();
        btnPublicationDeliveries = new JButton();
        jButton7 = new JButton();
        jPanel2 = new JPanel();
        jPanel6 = new JPanel();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        CentrePanel = new JPanel();
        CreateDeliveryDocket = new JPanel();
        jPanel4 = new JPanel();
        jLabel3 = new JLabel();
        tfDeliveryPersonIDoncreate = new JTextField();
        jTextField2 = new JTextField();
        jLabel30 = new JLabel();
        tfDateOnCreate = new JTextField();
        btnSubmitDeliveryPersonIdOnCreate = new JButton();
        btnSubmitDateOnCreate = new JButton();
        tfWarningCREATE = new JTextField();
        jScrollPane2 = new JScrollPane();
        textAreaDeliveryDocketAreaCREATE = new JTextArea();
        jScrollBar1 = new JScrollBar();
        DisplayAll = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jLabel32 = new JLabel();
        jLabel33 = new JLabel();
        jLabel34 = new JLabel();
        jLabel35 = new JLabel();
        editSubmitDPidBtn = new JButton();
        editDPidTf = new JTextField();
        editEnterDateTf = new JTextField();
        editEnterIdNonDeliveredTf = new JTextField();
        editSubmitDateBtn = new JButton();
        editConfirmAllDeliveredBtn = new JButton();
        editEnterIdNonDeliveredBtn = new JButton();
        editWarningTf = new JTextField();
        DeleteDeliveryDocket = new JPanel();
        jLabel36 = new JLabel();
        jLabel37 = new JLabel();
        jLabel38 = new JLabel();
        tfDPidOnDelete = new JTextField();
        tfDateOnDelete = new JTextField();
        btnSubmitOnDelete = new JButton();
        btnYesOnDelete = new JButton();
        tfWarningOnDelete = new JTextField();
        btnNoOnDelete = new JButton();
        textAreaDelete = new JTextArea();
        SeeAllCustomerDeliveries = new JPanel();
        DisplayOne3 = new JPanel();
        jScrollPane5 = new JScrollPane();
        jTableCustomerDeliveries = new JTable();
        jPanel8 = new JPanel();
        jLabel4 = new JLabel();
        tfCustomerDeliveriesId = new JTextField();
        btnSubmitOnCustomerPublications = new JButton();
        tfWarningOnCustomerDeliveries = new JLabel();
        SeeAllPublicationDeliveries = new JPanel();
        DisplayOne1 = new JPanel();
        jScrollPane3 = new JScrollPane();
        jTable3 = new JTable();
        jPanel5 = new JPanel();
        jLabel53 = new JLabel();
        tfPubIdOnDisplayPublications = new JTextField();
        btnSubmitOnPublication = new JButton();
        tfWarningOnPublications = new JLabel();
        this.setLocationRelativeTo(null);
        setResizable(false);

        // default values
        String defaultDate = LocalDate.now().toString();
        tfDateOnCreate.setText(defaultDate);
        editEnterDateTf.setText(defaultDate);
        editDPidTf.setText("1");
        tfDeliveryPersonIDoncreate.setText("1");
        tfWarningOnDelete.setText("");
        tfDPidOnDelete.setText("1");
        tfDateOnDelete.setText(defaultDate);
        tfCustomerDeliveriesId.setText("1");
        tfPubIdOnDisplayPublications.setText("1");

        // center
        tfDateOnCreate.setHorizontalAlignment(JTextField.CENTER);
        editEnterDateTf.setHorizontalAlignment(JTextField.CENTER);
        editDPidTf.setHorizontalAlignment(JTextField.CENTER);
        tfDeliveryPersonIDoncreate.setHorizontalAlignment(JTextField.CENTER);
        tfWarningOnDelete.setHorizontalAlignment(JTextField.CENTER);
        tfDPidOnDelete.setHorizontalAlignment(JTextField.CENTER);
        tfDateOnDelete.setHorizontalAlignment(JTextField.CENTER);
        tfCustomerDeliveriesId.setHorizontalAlignment(JTextField.CENTER);
        tfPubIdOnDisplayPublications.setHorizontalAlignment(JTextField.CENTER);
        editEnterIdNonDeliveredTf.setHorizontalAlignment(JTextField.CENTER);

        // make text bigger
        tfPubIdOnDisplayPublications.setFont(new java.awt.Font(null, 0, 18));
        tfCustomerDeliveriesId.setFont(new java.awt.Font(null, 0, 18));
        tfDPidOnDelete.setFont(new java.awt.Font(null, 0, 18));
        tfDateOnDelete.setFont(new java.awt.Font(null, 0, 18));
        editDPidTf.setFont(new java.awt.Font(null, 0, 18));
        editEnterDateTf.setFont(new java.awt.Font(null, 0, 18));
        editEnterIdNonDeliveredTf.setFont(new java.awt.Font(null, 0, 18));
        tfDeliveryPersonIDoncreate.setFont(new java.awt.Font(null, 0, 18));
        tfDateOnCreate.setFont(new java.awt.Font(null, 0, 18));

        tfPubIdOnDisplayPublications.setBackground(new java.awt.Color(19, 28, 33));
        tfPubIdOnDisplayPublications.setForeground(new java.awt.Color(6, 187, 163));
        tfCustomerDeliveriesId.setBackground(new java.awt.Color(19, 28, 33));
        tfCustomerDeliveriesId.setForeground(new java.awt.Color(6, 187, 163));
        tfDPidOnDelete.setBackground(new java.awt.Color(19, 28, 33));
        tfDPidOnDelete.setForeground(new java.awt.Color(6, 187, 163));
        tfDateOnDelete.setBackground(new java.awt.Color(19, 28, 33));
        tfDateOnDelete.setForeground(new java.awt.Color(6, 187, 163));
        editEnterDateTf.setBackground(new java.awt.Color(19, 28, 33));
        editEnterDateTf.setForeground(new java.awt.Color(6, 187, 163));
        editEnterIdNonDeliveredTf.setBackground(new java.awt.Color(19, 28, 33));
        editEnterIdNonDeliveredTf.setForeground(new java.awt.Color(6, 187, 163));
        tfDeliveryPersonIDoncreate.setBackground(new java.awt.Color(19, 28, 33));
        tfDeliveryPersonIDoncreate.setForeground(new java.awt.Color(6, 187, 163));
        tfDateOnCreate.setBackground(new java.awt.Color(19, 28, 33));
        tfDateOnCreate.setForeground(new java.awt.Color(6, 187, 163));
        editDPidTf.setBackground(new java.awt.Color(19, 28, 33));
        editDPidTf.setForeground(new java.awt.Color(6, 187, 163));

        /*** Create Listeners***/
        btnSubmitDeliveryPersonIdOnCreate.addActionListener(this::submitDeliveryPersonIdOnCreate);

        btnSubmitDateOnCreate.addActionListener(this::submitDateOnCreate);

        /*** Edit Listeners***/
        editSubmitDateBtn.addActionListener(evt -> submitDateOnEdit());

        editSubmitDPidBtn.addActionListener(evt -> submitDBidOnEdit(evt));

        editConfirmAllDeliveredBtn.addActionListener(evt -> confirmDeliveredOnEdit(evt));

        editEnterIdNonDeliveredBtn.addActionListener(evt -> confirmUndeliveredOnEdit());

        /*** Delete Listeners ***/


        btnSubmitOnDelete.addActionListener(evt -> submitOnDelete());

        btnYesOnDelete.addActionListener(evt -> yesClickedOnDelete());

        btnNoOnDelete.addActionListener(evt -> noClickedOnDelete());

        /*** Customer Deliveries listener ***/

        btnSubmitOnCustomerPublications.addActionListener(evt -> displayCustomerPublicationsClicked());

        /*** Publication Deliveries listener ***/

        btnSubmitOnPublication.addActionListener(evt -> submitONPublicationClicked());



//        jButton7.addActionListener(evt -> System.out.println("Button 7 clicked"));

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(19, 28, 33));

        jPanel3.setBackground(new java.awt.Color(19, 28, 33));

        btnCreateDocketMenu.setBackground(new java.awt.Color(19, 28, 33));
        btnCreateDocketMenu.setFont(new java.awt.Font("sansserif", Font.PLAIN, 24)); // NOI18N
        btnCreateDocketMenu.setForeground(new java.awt.Color(49, 117, 108));
        btnCreateDocketMenu.setText("Create Docket");
        btnCreateDocketMenu.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCreateDocketMenu.addActionListener(evt -> jButton1ActionPerformed(evt));

        btnEditDocketMenu.setBackground(new java.awt.Color(19, 28, 33));
        btnEditDocketMenu.setFont(new java.awt.Font("sansserif", Font.PLAIN, 24)); // NOI18N
        btnEditDocketMenu.setForeground(new java.awt.Color(49, 117, 108));
        btnEditDocketMenu.setText("Edit Docket");
        btnEditDocketMenu.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEditDocketMenu.addActionListener(evt -> jButton3ActionPerformed(evt));

        btnDeleteDocketMenu.setBackground(new java.awt.Color(19, 28, 33));
        btnDeleteDocketMenu.setFont(new java.awt.Font("sansserif", Font.PLAIN, 24)); // NOI18N
        btnDeleteDocketMenu.setForeground(new java.awt.Color(49, 117, 108));
        btnDeleteDocketMenu.setText("Delete");
        btnDeleteDocketMenu.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDeleteDocketMenu.addActionListener(evt -> jButton4ActionPerformed(evt));

        btnCustomerDeliveriesMenu.setBackground(new java.awt.Color(19, 28, 33));
        btnCustomerDeliveriesMenu.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        btnCustomerDeliveriesMenu.setForeground(new java.awt.Color(49, 117, 108));
        btnCustomerDeliveriesMenu.setText("Customer Deliveries");
        btnCustomerDeliveriesMenu.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCustomerDeliveriesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        btnPublicationDeliveries.setBackground(new java.awt.Color(19, 28, 33));
        btnPublicationDeliveries.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        btnPublicationDeliveries.setForeground(new java.awt.Color(49, 117, 108));
        btnPublicationDeliveries.setText("Publication Deliveries");
        btnPublicationDeliveries.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnPublicationDeliveries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(19, 28, 33));
        jButton7.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(6, 187, 163));
        jButton7.setText("Log Out");
        jButton7.setBorder(BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.addActionListener(evt -> jButton7ActionPerformed(evt));

        jPanel2.setBackground(new java.awt.Color(19, 28, 33));

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 1295, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnEditDocketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCreateDocketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnDeleteDocketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCustomerDeliveriesMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnPublicationDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnCreateDocketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEditDocketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeleteDocketMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCustomerDeliveriesMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addComponent(btnPublicationDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(19, 28, 33));

        jLabel1.setIcon(new ImageIcon(getClass().getResource("../images/NewspaperLogoDarkGreenSmall.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setFont(new java.awt.Font("Niagara Engraved", 0, 140)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(49, 117, 108));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Delivery Docket Menu");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CentrePanel.setLayout(new java.awt.CardLayout());

        CreateDeliveryDocket.setBackground(new java.awt.Color(19, 28, 33));

        jPanel4.setBackground(new java.awt.Color(19, 28, 33));

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(6, 187, 163));
        jLabel3.setText("Enter Delivery Person ID");


        jTextField2.setBackground(new java.awt.Color(19, 28, 39));
        jTextField2.setForeground(new java.awt.Color(18, 30, 49));
        jTextField2.setBorder(null);
        jTextField2.setDisabledTextColor(new java.awt.Color(19, 28, 33));
        jTextField2.setFocusable(false);
        jTextField2.setSelectedTextColor(new java.awt.Color(19, 28, 33));

        jLabel30.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(6, 187, 163));
        jLabel30.setText("Enter Date of Delivery Docket");


        btnSubmitDeliveryPersonIdOnCreate.setBackground(new java.awt.Color(49, 117, 108));
        btnSubmitDeliveryPersonIdOnCreate.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnSubmitDeliveryPersonIdOnCreate.setForeground(new java.awt.Color(0, 0, 0));
        btnSubmitDeliveryPersonIdOnCreate.setText("Submit");

        btnSubmitDateOnCreate.setBackground(new java.awt.Color(49, 117, 108));
        btnSubmitDateOnCreate.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnSubmitDateOnCreate.setForeground(new java.awt.Color(0, 0, 0));
        btnSubmitDateOnCreate.setText("Submit");

        tfWarningCREATE.setBackground(new java.awt.Color(19, 28, 33));
        tfWarningCREATE.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        tfWarningCREATE.setForeground(new java.awt.Color(255, 0, 0));
        tfWarningCREATE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfWarningCREATE.setBorder(null);

        textAreaDeliveryDocketAreaCREATE.setEditable(false);
        textAreaDeliveryDocketAreaCREATE.setBackground(new java.awt.Color(19, 28, 33));
        textAreaDeliveryDocketAreaCREATE.setColumns(20);
        textAreaDeliveryDocketAreaCREATE.setForeground(new java.awt.Color(49, 117, 108));
        textAreaDeliveryDocketAreaCREATE.setRows(5);
        textAreaDeliveryDocketAreaCREATE.setFont(new java.awt.Font(Font.MONOSPACED, Font.PLAIN, 18));
        jScrollPane2.setViewportView(textAreaDeliveryDocketAreaCREATE);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(tfDeliveryPersonIDoncreate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(tfDateOnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(39, 39, 39)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                                .addComponent(btnSubmitDateOnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(251, 251, 251)
                                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(btnSubmitDeliveryPersonIdOnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGap(41, 41, 41)
                                                .addComponent(tfWarningCREATE, javax.swing.GroupLayout.PREFERRED_SIZE, 1232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfDeliveryPersonIDoncreate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSubmitDeliveryPersonIdOnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tfDateOnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnSubmitDateOnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfWarningCREATE, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE))
                                .addContainerGap())
        );

        javax.swing.GroupLayout CreateDeliveryDocketLayout = new javax.swing.GroupLayout(CreateDeliveryDocket);
        CreateDeliveryDocket.setLayout(CreateDeliveryDocketLayout);
        CreateDeliveryDocketLayout.setHorizontalGroup(
                CreateDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1312, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        CreateDeliveryDocketLayout.setVerticalGroup(
                CreateDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(CreateDeliveryDocketLayout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        CentrePanel.add(CreateDeliveryDocket, "card3");

        DisplayAll.setBackground(new java.awt.Color(19, 28, 33));

        jScrollPane1.setBackground(new java.awt.Color(19, 28, 33));


        jTable1.setGridColor(new java.awt.Color(49, 117, 108));
        jScrollPane1.setViewportView(jTable1);
        JTableHeader tableHeader1 = jTable1.getTableHeader();
        tableHeader1.setBackground(new java.awt.Color(255, 255, 255));
        tableHeader1.setForeground(new java.awt.Color(19, 28, 33));
        tableHeader1.setFont(new Font(null, Font.BOLD, 15));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setBackground(new java.awt.Color(19, 28, 33));
        jTable1.setForeground(new java.awt.Color(6, 187, 163));
        jTable1.setFont(new Font(null, 0, 15));
        jTable1.setFillsViewportHeight(true);
        setTable1Model();
        jTable1.setShowGrid(true);
        jTable1.setGridColor(new java.awt.Color(49, 117, 108));
        jTable1.setRowHeight(40);
        ((DefaultTableCellRenderer) jTable1.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);


        jLabel32.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(6, 187, 163));
        jLabel32.setText("Enter Delivery Person ID");

        jLabel33.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(6, 187, 163));
        jLabel33.setText("Enter Date of Delivery Docket");

        jLabel34.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(6, 187, 163));
        jLabel34.setText("Have ALL items been Delivered?");

        jLabel35.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(6, 187, 163));
        jLabel35.setText("Enter ID's of any non Delivered Items");

        editSubmitDPidBtn.setBackground(new java.awt.Color(49, 117, 108));
        editSubmitDPidBtn.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        editSubmitDPidBtn.setForeground(new java.awt.Color(0, 0, 0));
        editSubmitDPidBtn.setText("Set ID");

        editSubmitDateBtn.setBackground(new java.awt.Color(49, 117, 108));
        editSubmitDateBtn.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        editSubmitDateBtn.setForeground(new java.awt.Color(0, 0, 0));
        editSubmitDateBtn.setText("Submit");

        editConfirmAllDeliveredBtn.setBackground(new java.awt.Color(49, 117, 108));
        editConfirmAllDeliveredBtn.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        editConfirmAllDeliveredBtn.setForeground(new java.awt.Color(0, 0, 0));
        editConfirmAllDeliveredBtn.setText("YES");

        editEnterIdNonDeliveredBtn.setBackground(new java.awt.Color(49, 117, 108));
        editEnterIdNonDeliveredBtn.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        editEnterIdNonDeliveredBtn.setForeground(new java.awt.Color(0, 0, 0));
        editEnterIdNonDeliveredBtn.setText("Submit");

        editWarningTf.setBackground(new java.awt.Color(19, 28, 33));
        editWarningTf.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        editWarningTf.setForeground(new java.awt.Color(255, 0, 0));
        editWarningTf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        editWarningTf.setBorder(null);

        javax.swing.GroupLayout DisplayAllLayout = new javax.swing.GroupLayout(DisplayAll);
        DisplayAll.setLayout(DisplayAllLayout);
        DisplayAllLayout.setHorizontalGroup(
                DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DisplayAllLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addGroup(DisplayAllLayout.createSequentialGroup()
                                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                                                        .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(34, 34, 34)
                                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(editEnterIdNonDeliveredTf, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(editEnterDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(editDPidTf, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(56, 56, 56)
                                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(editSubmitDPidBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(editSubmitDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(editEnterIdNonDeliveredBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(editConfirmAllDeliveredBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 598, Short.MAX_VALUE))
                                        .addComponent(editWarningTf))
                                .addContainerGap())
        );
        DisplayAllLayout.setVerticalGroup(
                DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DisplayAllLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editSubmitDPidBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(editDPidTf, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editEnterDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editSubmitDateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editConfirmAllDeliveredBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(DisplayAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editEnterIdNonDeliveredTf, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editEnterIdNonDeliveredBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editWarningTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))
        );

        CentrePanel.add(DisplayAll, "card2");

        DeleteDeliveryDocket.setBackground(new java.awt.Color(19, 28, 33));

        jLabel36.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(6, 187, 163));
        jLabel36.setText("Enter Delivery Person ID");

        jLabel37.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(6, 187, 163));
        jLabel37.setText("Enter Date of Delivery Docket");

        jLabel38.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(6, 187, 163));
        jLabel38.setText("Are You SURE you want to DELETE this Docket");


        btnSubmitOnDelete.setBackground(new java.awt.Color(49, 117, 108));
        btnSubmitOnDelete.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnSubmitOnDelete.setForeground(new java.awt.Color(0, 0, 0));
        btnSubmitOnDelete.setText("Submit");

        btnYesOnDelete.setBackground(new java.awt.Color(49, 117, 108));
        btnYesOnDelete.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnYesOnDelete.setForeground(new java.awt.Color(0, 0, 0));
        btnYesOnDelete.setText("YES");

        tfWarningOnDelete.setBackground(new java.awt.Color(19, 28, 33));
        tfWarningOnDelete.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        tfWarningOnDelete.setForeground(new java.awt.Color(255, 0, 0));
        tfWarningOnDelete.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfWarningOnDelete.setBorder(null);
        tfWarningOnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField41ActionPerformed(evt);
            }
        });

        btnNoOnDelete.setBackground(new java.awt.Color(49, 117, 108));
        btnNoOnDelete.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnNoOnDelete.setForeground(new java.awt.Color(0, 0, 0));
        btnNoOnDelete.setText("NO");


        /**************************DELETE****************************/
        textAreaDelete.setEditable(false);
        textAreaDelete.setBackground(new java.awt.Color(19, 28, 33));
        textAreaDelete.setColumns(20);
        textAreaDelete.setForeground(new java.awt.Color(49, 117, 108));
        textAreaDelete.setRows(5);
        textAreaDelete.setFont(new java.awt.Font(Font.MONOSPACED, Font.PLAIN, 18));
        jScrollPane2.setViewportView(textAreaDeliveryDocketAreaCREATE);


        javax.swing.GroupLayout DeleteDeliveryDocketLayout = new javax.swing.GroupLayout(DeleteDeliveryDocket);
        DeleteDeliveryDocket.setLayout(DeleteDeliveryDocketLayout);
        DeleteDeliveryDocketLayout.setHorizontalGroup(
                DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DeleteDeliveryDocketLayout.createSequentialGroup()
                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(textAreaDelete)
                                        .addGroup(DeleteDeliveryDocketLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(DeleteDeliveryDocketLayout.createSequentialGroup()
                                                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jLabel38, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(tfDateOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(tfDPidOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(56, 56, 56)
                                                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(btnSubmitOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(DeleteDeliveryDocketLayout.createSequentialGroup()
                                                                                .addComponent(btnYesOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(btnNoOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(0, 479, Short.MAX_VALUE))
                                                        .addComponent(tfWarningOnDelete))))
                                .addContainerGap())
        );
        DeleteDeliveryDocketLayout.setVerticalGroup(
                DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DeleteDeliveryDocketLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfDPidOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfDateOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSubmitOnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(DeleteDeliveryDocketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnYesOnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnNoOnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(tfWarningOnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textAreaDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
        );

        CentrePanel.add(DeleteDeliveryDocket, "card8");

        DisplayOne3.setBackground(new java.awt.Color(19, 28, 33));


        /****Customer Deliveries table***/
        jTableCustomerDeliveries.setGridColor(new java.awt.Color(49, 117, 108));
        jScrollPane5.setViewportView(jTableCustomerDeliveries);
        JTableHeader tableHeader2 = jTableCustomerDeliveries.getTableHeader();
        tableHeader2.setBackground(new java.awt.Color(255, 255, 255));
        tableHeader2.setForeground(new java.awt.Color(19, 28, 33));
        tableHeader2.setFont(new Font(null, Font.BOLD, 15));
        jTableCustomerDeliveries.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableCustomerDeliveries.setBackground(new java.awt.Color(19, 28, 33));
        jTableCustomerDeliveries.setForeground(new java.awt.Color(6, 187, 163));
        jTableCustomerDeliveries.setFont(new Font(null, 0, 15));
        jTableCustomerDeliveries.setFillsViewportHeight(true);
        jTableCustomerDeliveries.setShowGrid(true);
        jTableCustomerDeliveries.setGridColor(new java.awt.Color(49, 117, 108));
        jTableCustomerDeliveries.setRowHeight(40);

        //jScrollPane5.setBackground(new java.awt.Color(19, 28, 33));
        resetTableModel();
        ((DefaultTableCellRenderer) jTableCustomerDeliveries.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);




        jPanel8.setBackground(new java.awt.Color(19, 28, 33));

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(6, 187, 163));
        jLabel4.setText("If you want to see ALL deliveries that are planned for a customer, enter customer id: ");


        btnSubmitOnCustomerPublications.setBackground(new java.awt.Color(49, 117, 108));
        btnSubmitOnCustomerPublications.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnSubmitOnCustomerPublications.setForeground(new java.awt.Color(0, 0, 0));
        btnSubmitOnCustomerPublications.setText("Submit");




        tfWarningOnCustomerDeliveries.setBackground(new java.awt.Color(19, 28, 33));
        tfWarningOnCustomerDeliveries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        tfWarningOnCustomerDeliveries.setForeground(new java.awt.Color(255, 0, 0));
        tfWarningOnCustomerDeliveries.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfWarningOnCustomerDeliveries.setBorder(null);




        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1042, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addComponent(tfCustomerDeliveriesId, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnSubmitOnCustomerPublications, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tfWarningOnCustomerDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 340, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addComponent(tfCustomerDeliveriesId, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                                .addGap(2, 2, 2))
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(tfWarningOnCustomerDeliveries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnSubmitOnCustomerPublications, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout DisplayOne3Layout = new javax.swing.GroupLayout(DisplayOne3);
        DisplayOne3.setLayout(DisplayOne3Layout);
        DisplayOne3Layout.setHorizontalGroup(
                DisplayOne3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5)
        );
        DisplayOne3Layout.setVerticalGroup(
                DisplayOne3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DisplayOne3Layout.createSequentialGroup()
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout SeeAllCustomerDeliveriesLayout = new javax.swing.GroupLayout(SeeAllCustomerDeliveries);
        SeeAllCustomerDeliveries.setLayout(SeeAllCustomerDeliveriesLayout);
        SeeAllCustomerDeliveriesLayout.setHorizontalGroup(
                SeeAllCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1318, Short.MAX_VALUE)
                        .addGroup(SeeAllCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SeeAllCustomerDeliveriesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(DisplayOne3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );
        SeeAllCustomerDeliveriesLayout.setVerticalGroup(
                SeeAllCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 776, Short.MAX_VALUE)
                        .addGroup(SeeAllCustomerDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SeeAllCustomerDeliveriesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(DisplayOne3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );

        CentrePanel.add(SeeAllCustomerDeliveries, "card6");

        SeeAllPublicationDeliveries.setBackground(new java.awt.Color(19, 28, 33));

        DisplayOne1.setBackground(new java.awt.Color(19, 28, 33));




        jScrollPane3.setViewportView(jTable3);
        JTableHeader tableHeader3 = jTable3.getTableHeader();
        tableHeader3.setBackground(new java.awt.Color(255, 255, 255));
        tableHeader3.setForeground(new java.awt.Color(19, 28, 33));
        tableHeader3.setFont(new Font(null, Font.BOLD, 15));
        jTable3.setGridColor(new java.awt.Color(49, 117, 108));
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable3.setBackground(new java.awt.Color(19, 28, 33));
        jTable3.setForeground(new java.awt.Color(6, 187, 163));
        jTable3.setFont(new Font(null, 0, 15));
        jTable3.setFillsViewportHeight(true);
        jTable3.setShowGrid(true);
        jTable3.setRowHeight(40);

        ((DefaultTableCellRenderer) jTable3.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);
        jScrollPane3.setBackground(new java.awt.Color(19, 28, 33));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Publication", "Receiver Name",  "Date of delivery", "Delivery Status"
                }
        ));


        jPanel5.setBackground(new java.awt.Color(19, 28, 33));

        jLabel53.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(6, 187, 163));
        jLabel53.setText("To see all deliveries for a publication, enter publication id:");


        btnSubmitOnPublication.setBackground(new java.awt.Color(49, 117, 108));
        btnSubmitOnPublication.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btnSubmitOnPublication.setForeground(new java.awt.Color(0, 0, 0));
        btnSubmitOnPublication.setText("Submit");


        tfWarningOnPublications.setBackground(new java.awt.Color(19, 28, 33));
        tfWarningOnPublications.setForeground(new java.awt.Color(255, 0, 0));
        tfWarningOnPublications.setBorder(null);
        tfWarningOnPublications.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        tfWarningOnPublications.setHorizontalAlignment(javax.swing.JTextField.CENTER);




        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(tfPubIdOnDisplayPublications, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(12, 12, 12)
                                                .addComponent(btnSubmitOnPublication, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(tfWarningOnPublications, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 347, Short.MAX_VALUE))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(tfPubIdOnDisplayPublications, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                                .addGap(2, 2, 2))
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(btnSubmitOnPublication)
                                                .addComponent(tfWarningOnPublications, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DisplayOne1Layout = new javax.swing.GroupLayout(DisplayOne1);
        DisplayOne1.setLayout(DisplayOne1Layout);
        DisplayOne1Layout.setHorizontalGroup(
                DisplayOne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DisplayOne1Layout.createSequentialGroup()
                                .addGroup(DisplayOne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3))
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        DisplayOne1Layout.setVerticalGroup(
                DisplayOne1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(DisplayOne1Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 58, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SeeAllPublicationDeliveriesLayout = new javax.swing.GroupLayout(SeeAllPublicationDeliveries);
        SeeAllPublicationDeliveries.setLayout(SeeAllPublicationDeliveriesLayout);
        SeeAllPublicationDeliveriesLayout.setHorizontalGroup(
                SeeAllPublicationDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1335, Short.MAX_VALUE)
                        .addGroup(SeeAllPublicationDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SeeAllPublicationDeliveriesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(DisplayOne1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );
        SeeAllPublicationDeliveriesLayout.setVerticalGroup(
                SeeAllPublicationDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 816, Short.MAX_VALUE)
                        .addGroup(SeeAllPublicationDeliveriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SeeAllPublicationDeliveriesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(DisplayOne1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );

        CentrePanel.add(SeeAllPublicationDeliveries, "card7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(CentrePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1318, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(CentrePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>

    public void setTable1Model() {
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Delivery ID", "Address", "Customer Name",  "Delivery Type", "Is Delivered"
                }
        ));
    }

    private void jButton1ActionPerformed(ActionEvent evt) {
        if (evt.getSource() == btnCreateDocketMenu) {

            CreateDeliveryDocket.setVisible(true);
            DisplayAll.setVisible(false);
            DeleteDeliveryDocket.setVisible(false);
            SeeAllCustomerDeliveries.setVisible(false);
            SeeAllPublicationDeliveries.setVisible(false);

            // set auto date
            tfDateOnCreate.setText(LocalDate.now().toString());

        }
    }

    private void jButton3ActionPerformed(ActionEvent evt) {
        if (evt.getSource() == btnEditDocketMenu) {

            CreateDeliveryDocket.setVisible(false);
            DisplayAll.setVisible(true);
            DeleteDeliveryDocket.setVisible(false);
            SeeAllCustomerDeliveries.setVisible(false);
            SeeAllPublicationDeliveries.setVisible(false);

        }
    }

    private void jButton4ActionPerformed(ActionEvent evt) {
        if (evt.getSource() == btnDeleteDocketMenu) {

            CreateDeliveryDocket.setVisible(false);
            DisplayAll.setVisible(false);
            DeleteDeliveryDocket.setVisible(true);
            SeeAllCustomerDeliveries.setVisible(false);
            SeeAllPublicationDeliveries.setVisible(false);

        }
    }

    private void jButton5ActionPerformed(ActionEvent evt) {
        if (evt.getSource() == btnCustomerDeliveriesMenu) {

            CreateDeliveryDocket.setVisible(false);
            DisplayAll.setVisible(false);
            DeleteDeliveryDocket.setVisible(false);
            SeeAllCustomerDeliveries.setVisible(true);
            SeeAllPublicationDeliveries.setVisible(false);

        }
    }

    private void jButton6ActionPerformed(ActionEvent evt) {
        if (evt.getSource() == btnPublicationDeliveries) {

            CreateDeliveryDocket.setVisible(false);
            DisplayAll.setVisible(false);
            DeleteDeliveryDocket.setVisible(false);
            SeeAllCustomerDeliveries.setVisible(false);
            SeeAllPublicationDeliveries.setVisible(true);

        }
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {

        LoginGUI loginGUI = new LoginGUI();
        dispose();

    }

    /*********************************************************************/
    /********************************CREATE*******************************/
    /*********************************************************************/

    // error check on submitting
    private void submitDeliveryPersonIdOnCreate(ActionEvent evt) {
        // reset warning
        tfWarningCREATE.setText("");

        checkDeliveryPersonIdOnCreate();
    }

    public int checkDeliveryPersonIdOnCreate() {
        String deliveryPersonId = tfDeliveryPersonIDoncreate.getText();
        int id = 0;
        try {
            id = handler.validateDeliveryPersonId(deliveryPersonId);
            String date = getDateFromCreate();
            displayDeliveryDocket(id, date);
        } catch (DeliveryDocketExceptionHandler e) {
            showError(tfWarningCREATE, e.getMessage());
        }
        return id;
    }


    private void submitDateOnCreate(ActionEvent evt) {

        // reset error msg
        tfWarningCREATE.setText("");
        String date = tfDateOnCreate.getText();

        try {
            // try validating date
            deliveryDocket.validateDate(date);

            // if date is correct, create and display delivery docket
            deliveryDocketDB.generateDeliveriesIfNeeded(date);

            int deliveryPersonId = checkDeliveryPersonIdOnCreate();


            displayDeliveryDocket(deliveryPersonId, date);

        } catch (DeliveryDocketExceptionHandler e) {
            showError(tfWarningCREATE, e.getMessage());
        } catch (Exception e) {
            showError(tfWarningCREATE,"Date format incorrect");
        }
    }

    public String getDateFromCreate() throws DeliveryDocketExceptionHandler {
        String date = tfDateOnCreate.getText();

        try {
            // try validating date
            deliveryDocket.validateDate(date);

        } catch (Exception e) {
            throw e;
        }
        return date;
    }


    public void displayDeliveryDocket(int deliveryPersonId, String date) {
        try {

            DeliveryDocket docket = deliveryDocketDB.createDeliveryDocketFor(deliveryPersonId, date);
            textAreaDeliveryDocketAreaCREATE.setText(docket.toString());
            deliveryDocketDB.createDeliveryDocketFile(docket);
        } catch (DeliveryDocketExceptionHandler e) {
            System.out.println(e.getMessage());
        }
    }

    /*********************************************************************/
    /********************************EDIT*******************************/
    /*********************************************************************/

    // save current deliveries displayed
    private ArrayList<DeliveryItem> deliveries = new ArrayList<>();
    private String date = "";
    private int id = 0;

    public void submitDBidOnEdit(ActionEvent evt) {
        // reset error msg
        editWarningTf.setText("");
        getDeliveryPersonIdOnEdit();
    }


    public void submitDateOnEdit() {

        // reset error msg and table
        editWarningTf.setText("");

        try {
            this.date = getDateFromEdit();
            id = getDeliveryPersonIdOnEdit();

            if (id != 0) {
                // if date is correct, create and display delivery docket
                deliveryDocketDB.generateDeliveriesIfNeeded(date);
                DeliveryDocket docket = deliveryDocketDB.createDeliveryDocketFor(id, date);
                deliveryDocketDB.createDeliveryDocketFile(docket);

                // get list of deliveries
                // get the delivery area id where the delivery person is working
                DeliveryArea area = deliveryDocketDB.getDeliveryArea(id);

                // get all deliveries for delivery docket
                deliveries.clear();
                this.deliveries = docket.getDeliveryItems();
                displayDeliveries(deliveries);
            }

        } catch (DeliveryDocketExceptionHandler e) {
            showError(editWarningTf, e.getMessage());
        } catch (Exception e) {
            showError(editWarningTf, "Date format incorrect");
        }

    }

    public void displayDeliveries(ArrayList<DeliveryItem> deliveryList) {

        setTable1Model();
        if (deliveryList.size() == 0) {
            showInfo(editWarningTf, "No deliveries for this day");
        } else {
            try {
                for (DeliveryItem delivery : deliveryList) {
                    String isDelivered = delivery.isDelivered() ? "yes" : "no";

                    if (delivery.getType().equals("publication")) {

                        String []  tbData= {delivery.getDeliveryId() + "", delivery.getCustomerAddress(), delivery.getCustomerName(), utility.getPublicationByID(delivery.getId()), isDelivered};
                        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
                        tblModel.addRow(tbData);
                    } else {
                        String[] tbData = {delivery.getId() + "", delivery.getCustomerAddress(), delivery.getCustomerName(), "Invoice", isDelivered};
                        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
                        tblModel.addRow(tbData);
                    }
                }
            } catch (DeliveryDocketExceptionHandler e) {
                e.printStackTrace();
            }
            // centering the output
            setCellsAlignment(jTable1, SwingConstants.CENTER);
        }
    }

    public String getDateFromEdit() throws DeliveryDocketExceptionHandler {
        String date = editEnterDateTf.getText();

        try {
            // try validating date
            deliveryDocket.validateDate(date);
        } catch (DeliveryDocketExceptionHandler e) {
            throw e;
        } catch (Exception e) {
            throw e;
        }
        return date;
    }

    public int getDeliveryPersonIdOnEdit() {
        String deliveryPersonId = editDPidTf.getText();
        try {
            if (deliveryPersonId.length() == 0) {
                showInfo(editWarningTf, "Please enter Delivery Person ID");
                return 0;
            }

            id = handler.validateDeliveryPersonId(deliveryPersonId);
        } catch (DeliveryDocketExceptionHandler e) {
            showError(editWarningTf, e.getMessage());
        }
        return id;
    }

    public int confirmUndeliveredOnEdit() {
        // reset warning message
        editWarningTf.setText("");
        int id = 0;


        if (deliveries.size() == 0) {
            showInfo(editWarningTf, "Deliveries list is empty");
        } else {
            String deliveryId = editEnterIdNonDeliveredTf.getText();

            if (deliveryId.length() == 0) {
                showInfo(editWarningTf, "Please enter delivery id");
                return 0;
            } else {
                try {
                    id = Integer.parseInt(deliveryId);
                    if (handler.validateDelivery(id) && containsIdInDeliveries(id)) {
                        // delivery id valid
                        // find the correct delivery
                        DeliveryItem deliveryItem = null;
                        for (DeliveryItem item : deliveries) {
                            if (item.getDeliveryId() == id) {
                                deliveryItem = item;
                            }
                            if (item.getId() == id) {
                                deliveryItem = item;
                            }
                        }

                        // if delivery was found and its not delivered yet, update the delivery
                        if (deliveryItem == null) {
                            showError(editWarningTf, "Delivery with delivery id " + deliveryId + " is not found");
                        } else {
                            // updating the delivery
                            try {
                                deliveryDocketDB.updateDeliveryStatus(deliveryItem, "not delivered");
                                submitDateOnEdit();
                                showInfo(editWarningTf, "Update successful");
                            } catch (DeliveryDocketExceptionHandler e) {
                                showError(editWarningTf, e.getMessage());
                            }
                        }

                    } else {
                        showInfo(editWarningTf, "Delivery with id " + id + " is not available.");
                    }
                }
                catch (NumberFormatException e) {
                    showError(editWarningTf, "Input is incorrect");
                }
            }
        }

        return id;
    }

    public boolean containsIdInDeliveries(int id) {
        for (DeliveryItem deliveryItem : deliveries) {
            if (deliveryItem.getDeliveryId() == id) {
                return true;
            }
        }
        return false;
    }

    public void confirmDeliveredOnEdit(ActionEvent evt) {
        // reset warning
        editWarningTf.setText("");

        // check if the list of deliveries is not empty
        if (deliveries.size() == 0) {
            showInfo(editWarningTf, "Deliveries list is empty");
        } else if (id == 0 || date.equals("")) {
            showError(editWarningTf, "Changing status not possible");
        } else {
            try {
                deliveryDocketDB.generateDeliveriesIfNeeded(date);
                deliveryDocketDB.updateDeliveriesStatus(id, date);

                DeliveryDocket docket = deliveryDocketDB.createDeliveryDocketFor(id, date);
                deliveryDocketDB.createDeliveryDocketFile(docket);

                // get all deliveries for delivery docket
                deliveries.clear();
                this.deliveries = docket.getDeliveryItems();
                displayDeliveries(deliveries);
                showInfo(editWarningTf, "All deliveries status changed to delivered");
            } catch (DeliveryDocketExceptionHandler e) {
                showError(editWarningTf, e.getMessage());
            }
        }

    }


    /*********************************************************************/
    /********************************DELETE*******************************/
    /*********************************************************************/

    private int dpIdOnDelete = 0;
    private String dateOnDelete = "";

    // "Submit" button click listener on DELETE tab
    private void submitOnDelete() {
        // reset warning
        tfWarningOnDelete.setText("");

        int id = checkDeliveryPersonIdOnDelete();
        String date = getDateOnDelete();

        // set local data
        dpIdOnDelete = id;
        dateOnDelete = date;

        if (id == 0) {
            showError(tfWarningOnDelete, "Delivery person id input is not valid");
        } else if (date.equals("")) {
            showError(tfWarningOnDelete, "Date input is not valid");
        } else {
            displayDeliveryDocketOnDelete(id, date);
        }
    }

    public int checkDeliveryPersonIdOnDelete() {
        String deliveryPersonId = tfDPidOnDelete.getText();
        int id = 0;
        try {
            id = handler.validateDeliveryPersonId(deliveryPersonId);
        } catch (DeliveryDocketExceptionHandler e) {
            showError(tfWarningOnDelete, e.getMessage());
        }
        return id;
    }


    private String getDateOnDelete() {

        // reset error msg
        tfWarningOnDelete.setText("");
        String date = "";

        try {
            date = tfDateOnDelete.getText();
            // try validating date
            deliveryDocket.validateDate(date);

            // if date is correct, create and display delivery docket
            deliveryDocketDB.generateDeliveriesIfNeeded(date);


        } catch (DeliveryDocketExceptionHandler e) {
            showError(tfWarningOnDelete, e.getMessage());
            date = "";
        } catch (Exception e) {
            showError(tfWarningOnDelete, "Date format incorrect");
            date = "";
        }

        return date;
    }


    public void displayDeliveryDocketOnDelete(int deliveryPersonId, String date) {
        try {

            DeliveryDocket docket = deliveryDocketDB.createDeliveryDocketFor(deliveryPersonId, date);
            textAreaDelete.setText(docket.toString());
            deliveryDocketDB.createDeliveryDocketFile(docket);
        } catch (DeliveryDocketExceptionHandler e) {
            System.out.println(e.getMessage());
        }
    }

    // "Yes" button click listener on DELETE tab
    public void yesClickedOnDelete() {
        tfWarningOnDelete.setText("");

        if (textAreaDelete.getText().equals("")) {
            showInfo(tfWarningOnDelete, "Nothing to delete");
        } else {
            if (dpIdOnDelete != 0 && !dateOnDelete.equals("")) {
                try {
                    // get the delivery area id where the delivery person is working
                    DeliveryArea area = deliveryDocketDB.getDeliveryArea(dpIdOnDelete);
                    String deliveryAreaName = area.getDAreaName();
                    String deliveryPersonName = utility.getDeliveryPersonName(area.getDeliveryPersonId());
                    String fileName = deliveryPersonName + "_" + deliveryAreaName + "_" + date + ".txt";
                    deliveryDocketDB.deleteFileIfExists(fileName);
                    showInfo(tfWarningOnDelete, "Delivery docket was deleted successfully");
                    textAreaDelete.setText("");
                } catch (DeliveryDocketExceptionHandler e) {
                    showError(tfWarningOnDelete, e.getMessage());
                }
            }
        }
    }

    //
    public void noClickedOnDelete() {
        // reset warning
        tfWarningOnDelete.setText("");

        // if text are is empty, nothing to delete
        if (textAreaDelete.getText().equals("")) {
            showInfo(tfWarningOnDelete, "Nothing to delete");
        } else {
            showInfo(tfWarningOnDelete, "Delivery docket was not deleted");
        }

    }

    /*********************************************************************/
    /************************CUSTOMER DELIVERIES**************************/
    /*********************************************************************/

    public void resetTableModel() {
        jTableCustomerDeliveries.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Customer ID", "Name", "Publication", "Date of Delivery", "Is delivered"
                }
        ));
        // centering the output
        setCellsAlignment(jTableCustomerDeliveries, SwingConstants.CENTER);
    }

    public void displayCustomerPublicationsClicked() {
        // reset warning
        tfWarningOnCustomerDeliveries.setText("");
        resetTableModel();

        int customerId = getCustomerIDOnCustomerDeliveries();

        if (customerId == 0) {
            showError(tfWarningOnCustomerDeliveries, "Incorrect format for customer ID");
        }
        else {
            // check if customer exists
            if (!utility.ifCustomerExists(customerId)) {
                showError(tfWarningOnCustomerDeliveries,"Customer with ID " + customerId + " does not exist");
            }
            else if (!utility.customerDeliveryExists(customerId)) {
                showInfo(tfWarningOnCustomerDeliveries, "Customer with ID " + customerId + " does not have any deliveries");
            }
            else {
                //display deliveries in the table
                String query = "SELECT customer.customer_id, customer.first_name, customer.last_name, publication.publication_name, delivery.delivery_date as 'date of delivery', delivery.delivery_status as 'isdelivered'\n" +
                        "FROM customer, delivery, publication\n" +
                        "WHERE customer.customer_id = delivery.customer_id \n" +
                        "\tAND delivery.publication_id = publication.publication_id\n" +
                        "\tAND customer.customer_id = " + customerId +
                        "\t ORDER BY delivery.delivery_date ASC;";;

                try {
                    Statement stmt = DBconnection.con.createStatement();
                    ResultSet rs = stmt.executeQuery(query);
                    // Sets the headings and returns the data from the DB
                    while (rs.next()) {
                        String name = rs.getString("first_name") + " " + rs.getString("last_name");
                        String publication = rs.getString("publication_name");
                        String date = rs.getString("date of delivery");
                        String isDelivered = rs.getString("isdelivered");

                        String tbData[] = {customerId+ "", name, publication, date, isDelivered};
                        DefaultTableModel tblModel = (DefaultTableModel) jTableCustomerDeliveries.getModel();
                        tblModel.addRow(tbData);
                    }

                } catch (SQLException sqle) {
                    System.out.println("Error: failed to display all Deliveries");
                    System.out.println(sqle.getMessage());
                    System.out.println(query);
                }
            }
        }
    }

    /**
     * Will return 0 if its invalid input, and number if the input is valid
     * @return customer id from the user input in Customer Deliveries tab
     */
    public int getCustomerIDOnCustomerDeliveries () {
        int id = 0;

        String cId = tfCustomerDeliveriesId.getText();
        try {
            id = Integer.parseInt(cId);
        }
        catch (NumberFormatException e ) {

        }
        return id;
    }


    /*********************************************************************/
    /************************PUBLICATION DELIVERIES***********************/
    /*********************************************************************/
    public void setJTable3() {
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Publication", "Receiver Name",  "Date of delivery", "Delivery Status"
                }
        ));

        // centering the output
        setCellsAlignment(jTable3, SwingConstants.CENTER);
    }


    public  void submitONPublicationClicked() {
        // reset warning
        tfWarningOnPublications.setText("");
        setJTable3();

        int publicationId = getPublicationIdOnPublications();

        if (publicationId == 0) {
            showError(tfWarningOnPublications, "Incorrect format for publication ID");
        }
        else {
            // check if publication exists
            if (!utility.publicationExists(publicationId)) {
                showInfo(tfWarningOnPublications, "Publication with ID " + publicationId + " does not exist");
            }
            else {
                //display deliveries in the table
                String query = "SELECT publication.publication_name, customer.first_name, customer.last_name, delivery.delivery_status ,delivery.delivery_date as 'date of delivery'\n" +
                        "FROM customer, delivery, publication\n" +
                        "WHERE customer.customer_id = delivery.customer_id \n" +
                        "\tAND delivery.publication_id = publication.publication_id\n" +
                        "\tAND publication.publication_id = " + publicationId + "" +
                        "\t ORDER BY delivery.delivery_date ASC;";

                try {
                    Statement stmt = DBconnection.con.createStatement();
                    ResultSet rs = stmt.executeQuery(query);
                    // Sets the headings and returns the data from the DB
                    while (rs.next()) {
                        String name = rs.getString("first_name") + " " + rs.getString("last_name");
                        String publication = rs.getString("publication_name");
                        String date = rs.getString("date of delivery");
                        String deliveryStatus = rs.getString("delivery_status");

                        String tbData[] = {publication, name, date, deliveryStatus};
                        DefaultTableModel tblModel = (DefaultTableModel) jTable3.getModel();
                        tblModel.addRow(tbData);
                    }

                } catch (SQLException sqle) {
                    showError(tfWarningOnPublications, "Error: failed to display all Deliveries");
                    System.out.println(sqle.getMessage());
                    System.out.println(query);
                }
            }
        }

    }

    public int getPublicationIdOnPublications() {
        int id = 0;

        String cId = tfPubIdOnDisplayPublications.getText();
        try {
            id = Integer.parseInt(cId);
        }
        catch (NumberFormatException e ) {

        }
        return id;
    }


    private void jTextField30ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField41ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }


    public static void setCellsAlignment(JTable table, int alignment) {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(alignment);

        TableModel tableModel = table.getModel();

        for (int columnIndex = 0; columnIndex < tableModel.getColumnCount(); columnIndex++) {
            table.getColumnModel().getColumn(columnIndex).setCellRenderer(rightRenderer);
        }

        ((DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);
    }

    // Showing warning message in red color
    public void showError(JTextField warningTextField, String msg) {
        warningTextField.setForeground(new Color(255, 0, 0));
        warningTextField.setText(msg);
    }

    // Showing warning message in blue color
    public void showInfo(JTextField warningTextField, String msg) {
        warningTextField.setForeground(new Color(6, 187, 163));
        warningTextField.setText(msg);
    }

    // Showing warning message in red color
    public void showError(JLabel warningTextField, String msg) {
        warningTextField.setForeground(new Color(255, 0, 0));
        warningTextField.setText(msg);
    }

    // Showing warning message in blue color
    public void showInfo(JLabel warningTextField, String msg) {
        warningTextField.setForeground(new Color(6, 187, 163));
        warningTextField.setText(msg);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeliveryDocketMainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeliveryDocketMainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeliveryDocketMainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeliveryDocketMainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeliveryDocketEmployeeMainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify

    // create
    private JPanel CreateDeliveryDocket;
    private JButton btnCreateDocketMenu;
    private JTextArea textAreaDeliveryDocketAreaCREATE;
    private JTextField tfDeliveryPersonIDoncreate;
    private JTextField tfWarningCREATE;
    private JTextField tfDateOnCreate;
    private JButton btnSubmitDeliveryPersonIdOnCreate;
    private JButton btnSubmitDateOnCreate;

    // edit
    private JButton editSubmitDPidBtn;
    private JButton editSubmitDateBtn;
    private JButton editConfirmAllDeliveredBtn;
    private JButton editEnterIdNonDeliveredBtn;
    private JTextField editWarningTf;
    private JTextField editDPidTf;
    private JTextField editEnterDateTf;
    private JTextField editEnterIdNonDeliveredTf;
    private JTable jTable1;
    private JButton btnEditDocketMenu;

    // delete
    private JPanel DeleteDeliveryDocket;
    private JButton btnDeleteDocketMenu;
    private JTextArea textAreaDelete;
    private JButton btnSubmitOnDelete;
    private JButton btnYesOnDelete;
    private JButton btnNoOnDelete;
    private JTextField tfWarningOnDelete;
    private JTextField tfDPidOnDelete;
    private JTextField tfDateOnDelete;

    // customer deliveries
    private JPanel SeeAllCustomerDeliveries;
    private JButton btnCustomerDeliveriesMenu;
    private JTextField tfCustomerDeliveriesId;
    private JButton btnSubmitOnCustomerPublications;

    // publication deliveries
    private JPanel SeeAllPublicationDeliveries;
    private JButton btnPublicationDeliveries;


    private JPanel CentrePanel;
    private JPanel DisplayAll;
    private JPanel DisplayOne1;
    private JPanel DisplayOne3;

    private JButton btnSubmitOnPublication;

    private JButton jButton7;

    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel30;
    private JLabel jLabel32;
    private JLabel jLabel33;
    private JLabel jLabel34;
    private JLabel jLabel35;
    private JLabel jLabel36;
    private JLabel jLabel37;
    private JLabel jLabel38;
    private JLabel jLabel4;
    private JLabel jLabel53;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanel8;
    private JScrollBar jScrollBar1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane5;

    private JTable jTable3;
    private JTable jTableCustomerDeliveries;

    private JLabel tfWarningOnCustomerDeliveries;
    private JTextField jTextField2;
    private JTextField tfPubIdOnDisplayPublications;
    private JLabel tfWarningOnPublications;


    DeliveryDocketHandler handler = new DeliveryDocketHandler();
    DeliveryDocket deliveryDocket = new DeliveryDocket();
    DeliveryDocketDB deliveryDocketDB = new DeliveryDocketDB();
    Utility utility = new Utility();


    // End of variables declaration
}
